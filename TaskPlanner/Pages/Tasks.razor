@page "/"
@attribute [Authorize]

@inject ITaskService _taskService;

<div class="wrapper">
    <div class="header">
        <h1 class="title">Tarefas</h1>
    </div>

    <div class="tasks-container">
        @foreach (var task in _tasks.OrderBy(x => x.Completed))
        {
            <TaskComponent Description="@task.Description" @key="task.Id"
                           Completed="@task.Completed" Id="@task.Id" OnCompleteCallback="(id) => HandleCompleteTask(id)"
                           OnDeleteCallback="(id) => HandleDeleteTask(id)" />
        }
    </div>

    <div class="add-task-container-absolute wrapper-content">
        <NewTaskComponent OnAddCallback="HandleAddTask"/>
     </div>
 </div>

 @code {
    private string IdUser = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private List<TaskItemViewModel> _tasks = new List<TaskItemViewModel>();

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState != null)
        {
            var authState = await authenticationState;

            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                var claim = user.FindFirst(x => x.Type == System.Security.Claims.ClaimTypes.NameIdentifier);

                if (claim != null)
                    IdUser = claim.Value;
            }
        }

        _tasks = new List<TaskItemViewModel>(await _taskService.GetAllTasksByUser(IdUser));
    }

    private async void HandleCompleteTask(string id)
    {
        var result = await _taskService.CompleteTask(id);

        var taskToUpdate = _tasks.FirstOrDefault(x => x.Id == id);
        if (taskToUpdate != null)
        {
            taskToUpdate.Completed = true;
            StateHasChanged();
        }
    }

    private async void HandleDeleteTask(string id)
    {
        var success = await _taskService.DeleteTaskById(id);

        if (success)
        {
            var taskToDelete = _tasks.FirstOrDefault(x => x.Id == id);
            if (taskToDelete != null)
            {
                _tasks.Remove(taskToDelete);
                StateHasChanged();
            }
        }
    }

    private async void HandleAddTask(NewTaskViewModel newTask)
    {
        var result = await _taskService.AddTask(newTask, IdUser);

        if (result != null)
        {
            _tasks.Add(result);
            StateHasChanged();
        }
    }
}
