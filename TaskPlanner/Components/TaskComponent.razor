<div class="task">
    @if (!IsInEditMode)
    {
        if (Completed)
        {
            <span class="material-symbols-outlined icon radio-marked">radio_button_checked</span>
        }
        else
        {
            <span class="material-symbols-outlined icon radio" @onclick="() => OnCompleteClick(Id)">radio_button_unchecked</span>
        }

        <input type="text" value="@Description" readonly class="input-task @(Completed ? "task-completed" : "")" placeholder="Adicionar uma tarefa" />

        <span class="material-symbols-outlined icon delete" @onclick="() => OnDeleteClick(Id)">delete</span>
    }
    else
    {
        <span class="material-symbols-outlined icon">add</span>
        <input type="text" @bind-value="NewTask.Description" class="input-task" placeholder="Adicionar uma tarefa" @onkeydown="(e) => KeyHandler(e)" />
    }

</div>

@code {

    [Parameter]
    public bool IsInEditMode { get; set; }

    [Parameter]
    public bool Completed { get; set; }

    [Parameter]
    public string Description { get; set; } = string.Empty;

    [Parameter]
    public string Id { get; set; } = string.Empty;

    private NewTaskViewModel NewTask { get; set; } = new NewTaskViewModel();

    [Parameter]
    public Action<string>? OnComplete { get; set; }
    
    [Parameter]
    public Action<string>? OnDelete { get; set; }

    [Parameter]
    public Action<NewTaskViewModel>? OnAdd { get; set; }

    private void OnCompleteClick(string id)
    {
        OnComplete?.Invoke(id);
    }
    
    private void OnDeleteClick(string id)
    {
        OnDelete?.Invoke(id);
    }

    private void KeyHandler(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            if (!string.IsNullOrEmpty(NewTask.Description))
            {
                OnAdd?.Invoke(NewTask);

                NewTask = new NewTaskViewModel();
                StateHasChanged();
            }
        }
    }
}
